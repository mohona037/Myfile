import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

// Class for Customer
class Customer {
    private String name;
    private String email;
    private String phoneNumber;

    public Customer(String name, String email, String phoneNumber) {
        this.name = name;
        this.email = email;
        this.phoneNumber = phoneNumber;
    }

    // Getters
    public String getName() {
        return name;
    }

    public String getEmail() {
        return email;
    }

    public String getPhoneNumber() {
        return phoneNumber;
    }
 public String toString() {
        return "Customer [Name=" + name + ", Email=" + email + ", Phone Number=" + phoneNumber + "]";
    }

}



class Account {
    private String accountId;
    private Customer customer;
    private static int accountCounter = 1000;

    public Account(Customer customer) {
        this.customer = customer;
        this.accountId = "ACC" + accountCounter++;
    }

    public String getAccountId() {
        return accountId;
    }

    public Customer getCustomer() {
        return customer;
    }

    //@Override
    public String toString() {
    return "Account [Account ID=" + accountId + ", " + customer.toString() + "]";
   }

}


class VehicleRentalSystem {
    private Map<String, Account> accountMap = new HashMap<>(); // To store registered accounts

    // Register a new customer
    public Account registerCustomer(String name, String email, String phoneNumber) {
        Customer customer = new Customer(name, email, phoneNumber);
        Account account = new Account(customer);
        accountMap.put(account.getAccountId(), account); // Store account with accountId as key
        System.out.println("Customer registered successfully!");
        System.out.println(account.toString());
        return account;
    }

    // Check if a customer is registered by name and accountId
    public boolean isRegisteredCustomer(String name, String accountId) {
        if (accountMap.containsKey(accountId)) {
            Account account = accountMap.get(accountId);
            return account.getCustomer().getName().equalsIgnoreCase(name);
        }
        return false;
    }
 // Book a vehicle for a registered customer
    public void bookVehicle(String name, String accountId) {
        if (isRegisteredCustomer(name, accountId)) {
            System.out.println("Vehicle booking successful for " + name + " with Account ID: " + accountId);
        } else {
            System.out.println("Invalid name or Account ID. Please register or provide valid details.");
        }
    }
}




public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        VehicleRentalSystem rentalSystem = new VehicleRentalSystem();

        while (true) {
            System.out.println("\nWelcome to Vehicle Rental System");
            System.out.println("1. Register Customer");
            System.out.println("2. Book Vehicle");
            System.out.println("3. Exit");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (choice) {
                case 1:
                    // Registration flow
                    System.out.print("Enter Name: ");
                    String name = scanner.nextLine();
                    System.out.print("Enter Email: ");
                    String email = scanner.nextLine();
                    System.out.print("Enter Phone Number: ");
                    String phoneNumber = scanner.nextLine();
                    rentalSystem.registerCustomer(name, email, phoneNumber);
                    break;
                case 2:
                    // Booking flow
                    System.out.print("Enter Name: ");
                    String bookingName = scanner.nextLine();
                    System.out.print("Enter Account ID: ");
                    String accountId = scanner.nextLine();
                    rentalSystem.bookVehicle(bookingName, accountId);
                    break;

                case 3:
                    // Exit the program
                    System.out.println("Thank you for using the Vehicle Rental System!");
                    scanner.close();
                    return;

                default:
                    System.out.println("Invalid choice. Please try again.");
                    break;
            }
        }
    }
}
